[DEFAULT]
debug = false
smtp_server = localhost
error_email_from = ckan@localhost

[app:main]
# use a full path to ensure the config is picked up wherever the tests are run from (this covers off
# both the default setup, where the tests are run from /srv/app/src/ckanext-doi/, and running them
# from an IDE like PyCharm which will copy the code into /opt/project/ and run it from there
use = config:/srv/app/src/ckan/test-core.ini

# the hosts referenced here resolve to the other docker containers configured in docker-compose.yml
sqlalchemy.url = postgresql://ckan:password@db/ckan
ckan.datastore.write_url = postgresql://ckan:password@db/datastore
ckan.datastore.read_url = postgresql://datastore_ro:password@db/datastore
ckan.redis.url = redis://redis:6379/1
solr_url = http://solr:8983/solr/ckan

# Insert any custom config settings to be used when running your extension's
# tests here. These will override the one defined in CKAN core's test-core.ini.
ckan.plugins = operandum scheming_datasets spatial_metadata spatial_query harvest

# Always set this to True; this prevents ckanext-spatial from attempting to setup spatial models
# in the database, which 1) is not necessary since we use Solr for spatial search and 2) will
# probably fail even if PostGIS is installed.
ckan.spatial.testing = True

# Logging configuration
[loggers]
keys = root, ckan, ckanext, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console

[logger_ckan]
qualname = ckan
handlers =
level = INFO

[logger_ckanext]
level = DEBUG
handlers = console
qualname = ckanext
propagate = 0

[logger_sqlalchemy]
handlers =
qualname = sqlalchemy.engine
level = WARN

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
